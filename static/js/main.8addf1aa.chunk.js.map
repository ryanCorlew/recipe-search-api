{"version":3,"sources":["components/Form.js","components/Recipes.js","App.js","components/Recipe.js","components/Router.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","getRecipe","style","marginBottom","className","type","name","cardStyle","margin","Recipes","recipes","map","recipe","key","id","src","alt","title","length","substring","to","pathname","state","API_KEY","App","e","a","recipeName","target","elements","value","preventDefault","fetch","api_call","json","data","setState","results","this","Component","Recipe","activeRecipe","instructions","componentDidMount","location","req","res","instructionsReq","instructionsRes","steps","console","log","ingredients","el","ingredient","number","step","display","flexDirection","alignItems","marginTop","React","Router","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8addf1aa.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Form = (props) => (\n  <form onSubmit={props.getRecipe} style={{ marginBottom: \"2rem\" }}>\n    <input className=\"form__input\" type=\"text\" name=\"recipeName\" />\n    <button className=\"form__button\">Search</button>\n  </form>\n);\n\nexport default Form;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst cardStyle = {\n  margin: \"0 0 2rem 0\",\n  //   borderRadius: \"5px\",\n  //   boxShadow: \"0px 0px 7px 2px rgba(0,0,0,0.75)\",\n  //   padding: \"8px\",\n};\n\nconst Recipes = (props) => {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        {props.recipes.map((recipe) => {\n          return (\n            <div key={recipe.id} className=\"col-md-4\" style={cardStyle}>\n              <div className=\"recipes__box\">\n                <img\n                  className=\"recipe__box-img\"\n                  src={`https://spoonacular.com/recipeImages/${recipe.id}-636x393.jpg`}\n                  alt={recipe.title}\n                />\n                <div className=\"recipe__text\">\n                  <h5 className=\"recipes__title\">\n                    {recipe.title.length < 20\n                      ? `${recipe.title}`\n                      : `${recipe.title.substring(0, 25)}...`}\n                  </h5>\n                </div>\n                <button className=\"recipe__buttons\">\n                  <Link\n                    to={{\n                      pathname: `/recipe/${recipe.id}`,\n                      state: { recipe: recipe.title },\n                    }}\n                  >\n                    View Recipe\n                  </Link>\n                </button>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Recipes;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Form from \"./components/Form\";\nimport Recipes from \"./components/Recipes\";\n\nconst API_KEY = \"2c91f4cd2f4849ad8c7712071af5e464\";\n\nclass App extends Component {\n  state = {\n    recipes: [],\n  };\n\n  getRecipe = async (e) => {\n    const recipeName = e.target.elements.recipeName.value;\n    e.preventDefault();\n    const api_call = await fetch(\n      `https://api.spoonacular.com/recipes/search?query=${recipeName}&number=10&apiKey=${API_KEY}`\n    );\n\n    const data = await api_call.json();\n    this.setState({ recipes: data.results });\n  };\n\n  // componentDidMount = () => {\n  //   const recipes = JSON.parse(localStorage.getItem(\"recipes\"));\n\n  //   this.setState({ recipes: recipes });\n  // };\n\n  // componentDidUpdate = () => {\n  //   const recipes = JSON.stringify(this.state.recipes);\n  //   localStorage.setItem(\"recipes\", recipes);\n  // };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Recipe Search</h1>\n          <h2 className=\"App-subtitle\">With the Spoonacular API</h2>\n        </header>\n        <Form getRecipe={this.getRecipe} />\n        <Recipes recipes={this.state.recipes} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst API_KEY = \"2c91f4cd2f4849ad8c7712071af5e464\";\n\nclass Recipe extends React.Component {\n  state = {\n    activeRecipe: [],\n    instructions: [],\n  };\n\n  componentDidMount = async () => {\n    const title = this.props.location.state.recipe;\n    const req = await fetch(\n      `https://api.spoonacular.com/recipes/search?query=${title}&number=5&apiKey=${API_KEY}`\n    );\n\n    const res = await req.json();\n    this.setState({ activeRecipe: res.results[0] });\n\n    const instructionsReq = await fetch(\n      `https://api.spoonacular.com/recipes/${res.results[0].id}/analyzedInstructions?apiKey=${API_KEY}`\n    );\n    const instructionsRes = await instructionsReq.json();\n    this.setState({ instructions: instructionsRes[0].steps });\n    console.log(this.state.instructions);\n  };\n\n  render() {\n    const recipe = this.state.activeRecipe;\n\n    const ingredients = this.state.instructions.map((el) => {\n      return el.ingredients.map((ingredient) => {\n        return <li key={ingredient.id}>{ingredient.name}</li>;\n      });\n    });\n\n    const steps = this.state.instructions.map((el) => {\n      return <li key={el.number}>{el.step}</li>;\n    });\n\n    return this.state.activeRecipe ? (\n      <div>\n        <header className=\"App-header\">\n          <div className=\"go-home\">\n            <Link to=\"/\">Go Home</Link>\n          </div>\n        </header>\n        <div className=\"container\">\n          <div className=\"active-recipe\">\n            <img\n              className=\"active-recipe__img\"\n              src={`https://spoonacular.com/recipeImages/${recipe.id}-636x393.jpg`}\n              alt={recipe.title}\n            />\n            <h3 className=\"active-recipe__title\">{recipe.title}</h3>\n            <div className=\"recipe-instructions\">\n              <h4>Ingredients</h4>\n              <ul>{ingredients}</ul>\n              <h4>Instructions</h4>\n              <ol>{steps}</ol>\n            </div>\n          </div>\n          <button className=\"active-recipe__button\">\n            <Link to=\"/\">Go Home</Link>\n          </button>\n        </div>\n      </div>\n    ) : (\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          marginTop: \"5rem\",\n        }}\n      >\n        <h1>Recipe Not Found</h1>\n        <button className=\"active-recipe__button\">\n          <Link to=\"/\">Go Home</Link>\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Recipe;\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport App from \"../App\";\nimport Recipe from \"./Recipe\";\n\nconst Router = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route path=\"/\" component={App} exact />\n      <Route path=\"/recipe/:id\" component={Recipe} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Router;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Router from \"./components/Router\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}